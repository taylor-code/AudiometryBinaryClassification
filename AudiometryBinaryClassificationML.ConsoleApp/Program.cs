// This file was auto-generated by ML.NET Model Builder. 

using System;
using AudiometryBinaryClassificationML.Model;

namespace AudiometryBinaryClassificationML.ConsoleApp
{
    class Program
    {
        static void Main(string[] args)
        {
            ModelBuilder.CreateModel();

            // Create single instance of sample data from first line of dataset for model input
            ModelInput sampleData = new ModelInput()
            {
                Col1 = @"Mild",
                Col2 = @"30",
                Col3 = @"25",
                Col4 = @"40",
                Col5 = @"25",
                Col6 = @"30",
                Col7 = @"30",
                Col8 = @"40",
                Col9 = @"30",
                Col10 = @"35",
                Col11 = @"30",
                Col12 = @"35",
                Col13 = @"25",
                Col14 = @"0",
                Col15 = @"5",
                Col16 = @"-5",
                Col17 = @"5",
                Col18 = @"5",
                Col19 = @"10",
                Col20 = @"5",
                Col21 = @"-5",
                Col22 = @"10",
                Col23 = @"0",
                Col24 = @"5",
                Col25 = @"10",
            };

            // Make a single prediction on the sample data and print results
            var predictionResult = ConsumeModel.Predict(sampleData);

            Console.WriteLine("\n\nUsing model to make single prediction -- Comparing actual Col0 with predicted Col0 from sample data...\n\n");
            Console.WriteLine($"Col1: {sampleData.Col1}");
            Console.WriteLine($"Col2: {sampleData.Col2}");
            Console.WriteLine($"Col3: {sampleData.Col3}");
            Console.WriteLine($"Col4: {sampleData.Col4}");
            Console.WriteLine($"Col5: {sampleData.Col5}");
            Console.WriteLine($"Col6: {sampleData.Col6}");
            Console.WriteLine($"Col7: {sampleData.Col7}");
            Console.WriteLine($"Col8: {sampleData.Col8}");
            Console.WriteLine($"Col9: {sampleData.Col9}");
            Console.WriteLine($"Col10: {sampleData.Col10}");
            Console.WriteLine($"Col11: {sampleData.Col11}");
            Console.WriteLine($"Col12: {sampleData.Col12}");
            Console.WriteLine($"Col13: {sampleData.Col13}");
            Console.WriteLine($"Col14: {sampleData.Col14}");
            Console.WriteLine($"Col15: {sampleData.Col15}");
            Console.WriteLine($"Col16: {sampleData.Col16}");
            Console.WriteLine($"Col17: {sampleData.Col17}");
            Console.WriteLine($"Col18: {sampleData.Col18}");
            Console.WriteLine($"Col19: {sampleData.Col19}");
            Console.WriteLine($"Col20: {sampleData.Col20}");
            Console.WriteLine($"Col21: {sampleData.Col21}");
            Console.WriteLine($"Col22: {sampleData.Col22}");
            Console.WriteLine($"Col23: {sampleData.Col23}");
            Console.WriteLine($"Col24: {sampleData.Col24}");
            Console.WriteLine($"Col25: {sampleData.Col25}");

            // Display results.
            Console.WriteLine($"\n\nPredicted Col0 value {predictionResult.Prediction} ({getTextFromValue(predictionResult.Prediction)})");
            Console.WriteLine($"Predicted Col0 scores: [{String.Join(",", predictionResult.Score)}]\n\n");
            Console.WriteLine("=============== End of process, hit any key to finish ===============");
            Console.ReadKey();
        }


        static string getTextFromValue(float valueF)
        {
            return (int)valueF == 0 ? "Conductive" : "Sensorineural";
        }
    }
}
